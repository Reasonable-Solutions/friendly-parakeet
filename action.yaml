name: 'Build and Push with Nix and Docker'
description: 'Check Nix flakes, build Nix packages and Docker containers, and push the containers'
inputs:
  packages:
    description: 'List of Nix packages to build, comma separated values'
    required: false
    default: ''
  containers:
    description: 'List of Docker containers to build and push, comma separated values'
    required: false
    default: ''
 publish:
   description: 'List of packages to publish, comma separated values'
   required: false
   default: ''

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check Nix flake inputs
      uses: DeterminateSystems/flake-checker-action@v4

    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v3

    - name: Nix Flake Check
      run: nix flake check
      shell: bash

    - name: Build Packages
      run: |
        if [ -z "${{ inputs.packages }}" ]; then
          nix build
        else
          for package in ${{ inputs.packages }}; do
            nix build $package
          done
        fi
      shell: bash

    - name: Build and Push Containers
      if: ${{ inputs.containers != '' }}
      run: |
        for container in ${{ inputs.containers }}; do
          # Add commands to build the container, e.g., with Nix or Docker
          # You will need to integrate your container build logic here

          echo "::set-output name=version::$(date +'%Y%m%d-%H%M%S')-$(git rev-parse --short HEAD)"
          docker build -t $container .

          echo ${{ env.GHCR_REGISTRY }}/${{ github.repository }}:$container | xargs -n 1 docker tag $container
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker push ${{ env.GHCR_REGISTRY }}/${{ github.repository }}:$container
          fi
        done
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and Upload Package
      run: |
        for package in ${{ inputs.publish }}; do
          nix build $package -o $package
          tar -czf $package-result.tar.gz $package
          outputs="$outputs $package-result.tar.gz"
        done
            echo "::set-output name=${package}_artifact::$package-result.tar.gz"
      shell: bash

    - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: built-packages
          path: ${{ steps.build_packages.outputs.package_outputs }}
